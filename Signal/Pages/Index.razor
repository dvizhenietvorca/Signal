@page "/"

@using System.Threading
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Helpers helpers_
@inject IJSRuntime _jsRuntime;
@implements IDisposable
@using Microsoft.Extensions.Configuration
@inject IConfiguration configuration
@using MudBlazor.Services

<audio id="roar" src="sounds/sound2.mp3" />

@{
    var styleCard = "height:" + (_Width < 600 ? "550px": "900px") + ";display:flex;flex-direction:column";
}

<MudCard Style="@styleCard">
    <MudCardHeader>
        <CardHeaderContent>
            @if(Data != null)
            {
                TimeSpan t = TimeSpan.FromSeconds((double)Data.Seconds);
                var strFormat = "{0:D2}:{1:D2}:{2:D2}";
                if(Data.Seconds < 3600) strFormat = "{1:D2}:{2:D2}";
                string s = string.Format(strFormat, ((int) t.TotalHours), t.Minutes, t.Seconds);
    
                if (Data.Seconds == 0 && !isLast) {
                    PlaySound();
                }

                if (Data?.PointCur?.City != Data?.PointNext?.City)
                {
                    <MudText Typo="Typo.h4" Align="Align.Center"><small>от: </small>@Data?.PointCur?.City</MudText>
                }
                <MudText Typo="Typo.h3" Align="Align.Center">@s</MudText>
                if (Data?.PointCur?.City != Data?.PointNext?.City)
                {
                    <MudText Typo="Typo.h4" Align="Align.Center"><small>до: </small>@(Data?.PointNext?.City ?? "Устье")</MudText>
                }
            }
            else
            {
                <MudText Typo="Typo.h5" Align="Align.Center">Данные не загружены</MudText>
            }
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent Style="overflow:auto">
        <div align="center">
            <img src="img/volga.png" />
        </div>
    </MudCardContent>
    @*<MudCardMedia Image="/img/volga.png" Height="750" />*@
</MudCard>

@*<MudContainer Class="d-flex justify-center py-2 px-1 mt-6" MaxWidth="MaxWidth.Medium" Style="overflow-y: scroll"><img src="/img/volga.png" /></MudContainer>*@

@code {

    [Inject] IResizeService ResizeService { get; set; }

    private SequenceCities[] sequenceCities;
    public System.Threading.Timer timer;
    CountdownView Data { get; set; }
    private bool isLast = false;
    int _Width = 0;

    protected override async Task OnInitializedAsync()
    {
        if (!helpers_.IsInitialized) await helpers_.Initialize(Http, localStorage, configuration, this);
        
        CreateTimer();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var size = await ResizeService.GetBrowserWindowSize();
            _Width = size.Width;
        }
    }

    public void CreateTimer()
    {
        int num = 0; 
        // устанавливаем метод обратного вызова
        TimerCallback tm = new TimerCallback(CallbackTimer);
        // создаем таймер
        timer = new Timer(tm, num, 0, 1000);
    }

    public async Task PlaySound()
    {
        if (helpers_.SoundOn)
            await _jsRuntime.InvokeAsync<string>("PlayAudio", "roar");
    }

    private void CallbackTimer(object obj)
    {
        Data = helpers_.Countdown();

        if (Data == null) return;

        if (Data.Seconds == 0 && Data.PointNext == null && !isLast) isLast = true;
        else StateHasChanged();
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}