@page "/"

@using System.Threading
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Helpers helpers_
@inject IJSRuntime _jsRuntime;
@implements IDisposable
@using Microsoft.Extensions.Configuration
@inject IConfiguration configuration
@using MudBlazor.Services

<audio id="roar" src="sounds/sound2.mp3" />

@{
    var styleCard = "height:" + (_Width < 600 ? "550px": "900px") + ";display:flex;flex-direction:column";
}

<MudCard Style="@styleCard">
    <MudCardHeader>
        <CardHeaderContent>
            @if(Data != null)
            {
                TimeSpan t = TimeSpan.FromSeconds((double)Data.Seconds);
                var strFormat = "{0:D2}:{1:D2}:{2:D2}";
                if(Data.Seconds < 3600) strFormat = "{1:D2}:{2:D2}";
                string s = string.Format(strFormat, ((int) t.TotalHours), t.Minutes, t.Seconds);
    
                if (Data.Seconds == 0 && !isLast) {
                    PlaySound();
                }

                if (Data?.PointCur?.Point != Data?.PointNext?.Point)
                {
                    <MudText Typo="Typo.h4" Align="Align.Center">@Data?.PointCur?.Point<small> (@Data?.PointCur?.Date.Value.ToShortTimeString())</small></MudText>
                    @if(TextCommonOn && (Data?.PointCur?.Common ?? false))
                    {
                        <MudText Typo="Typo.h5" Align="Align.Center">@TextCommon</MudText>
                    }
                    @if(TextPointOn)
                    {
                        <MudText Typo="Typo.h5" Align="Align.Center" Style="font-style: italic;">@Data?.PointCur?.Text</MudText>
                    }
                }
                <MudText Typo="Typo.h3" Align="Align.Center" Class="py-4">@s</MudText>
                if (Data?.PointCur?.Point != Data?.PointNext?.Point)
                {
                    <MudText Typo="Typo.h6" Align="Align.Center">@(Data?.PointNext?.Point ?? "Финиш")<small> (@Data?.PointNext?.Date.Value.ToShortTimeString())</small></MudText>
                    @if(TextCommonOn && (Data?.PointNext?.Common ?? false))
                    {
                        <MudText Typo="Typo.h5" Align="Align.Center">@TextCommon</MudText>
                    }
                    @if(TextPointOn)
                    {
                        <MudText Typo="Typo.h5" Align="Align.Center" Style="font-style: italic;">@Data?.PointNext?.Text</MudText>
                    }
                }
            }
            else
            {
                <MudText Typo="Typo.h5" Align="Align.Center">Данные не загружены</MudText>
            }
        </CardHeaderContent>
    </MudCardHeader>
    @if(ImgOn)
    {
        <MudCardContent Style="overflow:auto">
            <div align="center">
                @if (!string.IsNullOrEmpty(ImgPath))
                {
                    <MudImage Fluid="true" Src="@ImgPath" Class="rounded-lg"/>
                }
            </div>
        </MudCardContent>
    }
    @*<MudCardMedia Image="/img/volga.png" Height="750" />*@
</MudCard>

@*<MudContainer Class="d-flex justify-center py-2 px-1 mt-6" MaxWidth="MaxWidth.Medium" Style="overflow-y: scroll"><img src="/img/volga.png" /></MudContainer>*@

@code {

    [Inject] IResizeService ResizeService { get; set; }

    private SequenceCities[] sequenceCities;
    public System.Threading.Timer timer;
    CountdownView Data { get; set; }
    private bool isLast = false;
    int _Width = 0;
    private bool ImgOn { get; set; }
    private string TextCommon { get; set; }
    private bool TextCommonOn { get; set; }
    private bool TextPointOn { get; set; }
    private string ImgPath { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!helpers_.IsInitialized) await helpers_.Initialize(Http, localStorage, configuration, this);
        ImgOn = helpers_.ImgOn;
        TextCommonOn = helpers_.TextCommonOn;
        TextPointOn = helpers_.TextPointOn;
        TextCommon = configuration["TextCommon"];
        ImgPath = helpers_.ImgPath;

        CreateTimer();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var size = await ResizeService.GetBrowserWindowSize();
            _Width = size.Width;
        }
    }

    public void CreateTimer()
    {
        int num = 0; 
        // устанавливаем метод обратного вызова
        TimerCallback tm = new TimerCallback(CallbackTimer);
        // создаем таймер
        timer = new Timer(tm, num, 0, 1000);
    }

    public async Task PlaySound()
    {
        if (helpers_.SoundOn)
            await _jsRuntime.InvokeAsync<string>("PlayAudio", "roar");
    }

    private void CallbackTimer(object obj)
    {
        Data = helpers_.Countdown();

        if (Data == null) return;

        if (Data.Seconds == 0 && Data.PointNext == null && !isLast) isLast = true;
        else StateHasChanged();
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}