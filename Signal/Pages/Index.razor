@page "/"
@using System.Threading
@inject HttpClient Http
@inject Helpers helpers_
@inject IJSRuntime _jsRuntime;
@implements IDisposable

<audio id="roar" src="../sounds/sound2.mp3" />

@if(Data != null)
{
    TimeSpan t = TimeSpan.FromSeconds((double)Data.Seconds);
    var strFormat = "{0:D2}:{1:D2}:{2:D2}";
    if(Data.Seconds < 3600) strFormat = "{1:D2}:{2:D2}";
    string s = string.Format(strFormat, ((int) t.TotalHours), t.Minutes, t.Seconds);
    
    if (Data.Seconds == 0) {
        PlaySound();
    }

    @*<MudElement Class="d-flex justify-center py-2 px-1 mt-6"><H6 style="font-size: 4em;">@Data?.PointCur?.City</H6></MudElement>
    <MudElement Class="d-flex justify-center py-2 px-1 mt-6"><H6 style="font-size: 4em;">@s</H6></MudElement>
    <MudElement Class="d-flex justify-center py-2 px-1 mt-6"><H6 style="font-size: 4em;">@(Data?.PointNext?.City ?? "Устье")</H6></MudElement>*@

    <MudText Typo="Typo.h3" Align="Align.Center">@Data?.PointCur?.City</MudText>
    <MudText Typo="Typo.h1" Align="Align.Center">@s</MudText>
    <MudText Typo="Typo.h3" Align="Align.Center">@(Data?.PointNext?.City ?? "Устье")</MudText>
    
    <MudContainer Class="d-flex justify-center py-2 px-1 mt-6" MaxWidth="MaxWidth.Medium"><img src="/img/volga.png" /></MudContainer>

    @*<MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h3" Align="Align.Center">@Data?.PointCur?.City</MudText>
                <MudText Typo="Typo.h1" Align="Align.Center">@s</MudText>
                <MudText Typo="Typo.h3" Align="Align.Center">@(Data?.PointNext?.City ?? "Устье")</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardMedia Image="/img/volga.png" Height="750" />
    </MudCard>*@

}

@code {

    private SequenceCities[] sequenceCities;
    System.Threading.Timer timer;
    CountdownView Data { get; set; }
    private bool isLast = false;

    protected override async Task OnInitializedAsync()
    {
        if (!helpers_.IsInitialized) await helpers_.Initialize(Http);
        //sequenceCities = helpers_.sequenceCities;

        int num = 0; 
        // устанавливаем метод обратного вызова
        TimerCallback tm = new TimerCallback(CallbackTimer);
        // создаем таймер
        Timer timer = new Timer(tm, num, 0, 1000);

        /*timer = new System.Threading.Timer(async _ =>
            {
            Data = helpers_.Countdown();
            await InvokeAsync(StateHasChanged);
            //await InvokeAsync(() => StateHasChanged());
            //StateHasChanged();
        }, null, 0, 10000);*/
    }

    public async Task PlaySound()
    {
        await _jsRuntime.InvokeAsync<string>("PlayAudio", "roar");
    }

    private void CallbackTimer(object obj)
    {
        Data = helpers_.Countdown();
        
        if (Data.Seconds == 0 && Data.PointNext == null && !isLast) isLast = true;
        else StateHasChanged();
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}