@page "/settings"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Helpers helpers_
@using Signal.Shared
@using System.Linq
@using Microsoft.Extensions.Configuration
@inject IConfiguration configuration
@inject IDialogService DialogService

<MudGrid>
    <MudItem xs="12" sm="6" md="2">
        <MudDatePicker Label="Дата Посыла" DateChanged="OnDateChanged" />
    </MudItem>
    <MudItem xs="12" sm="6" md="2">
        <MudTimePicker Label="Час Посыла" TimeChanged="OnTimeChanged" OpenTo="OpenTo.Hours" TimeEditMode="TimeEditMode.OnlyHours" />
    </MudItem>
    <MudItem xs="12" sm="6" md="8">
        <MudTextField T="string" Value="@DataPath" ValueChanged="OnDataPathChanged" OnAdornmentClick="OnLoad" Placeholder="Путь к данным" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Refresh" />
    </MudItem>
</MudGrid>

<MudSwitch T="bool" Checked="@SoundOn" CheckedChanged="OnSoundTurnChanged" Label="Звуковой сигнал" title="Для срабатывания звукового сигнала, при достижении обратным отсчётом нулевого значения" Color="Color.Primary" />
<MudSwitch T="bool" Checked="@ImgOn" CheckedChanged="OnImgTurnChanged" Label="Изображение" title="Отображение на главной странице изображения (с картой)" Color="Color.Primary" />

@if (sequenceCities == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="sequenceCities" Hover="true" RowsPerPage=25 SortLabel="Sort By" Elevation="0">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<SequenceCities, object>(x=>x.Date)">Время</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SequenceCities, object>(x=>x.City)">Место</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Время">@context.Date</MudTd>
            <MudTd DataLabel="Место">@context.City</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}

<MudText>Приложение: @AppVer</MudText>


@code {
    private Version AppVer;
    private SequenceCities[] sequenceCities;
    private string DataPath { get; set; }
    private bool SoundOn { get; set; }
    private bool ImgOn { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AppVer = System.Reflection.Assembly.GetEntryAssembly().GetName().Version;

        if (!helpers_.IsInitialized) await helpers_.Initialize(Http, localStorage, configuration);
        sequenceCities = helpers_.sequenceCities;
        DataPath = helpers_.DataPath;
        SoundOn = helpers_.SoundOn;
        ImgOn = helpers_.ImgOn;
        StateHasChanged();
    }

    private async Task OnDataPathChanged(string value)
    {
        DataPath = value;
        helpers_.DataPath = value;

        await localStorage.SetItemAsync("dataPath", value);
    }

    private async Task OnSoundTurnChanged(bool value)
    {
        if (value)
        {
            await DialogService.ShowMessageBox(
                "Внимание", 
                "Для правильной работы звукового сигнала необходимо, чтоб главная страница этого сайта всегда была открыта, а на смартфоне экран не погашен! На смартфонах возможно запаздывание срабатывания сигнала на несколько секунд.", 
                yesText:"Понятно");
        }

        SoundOn = value;
        helpers_.SoundOn = value;

        await localStorage.SetItemAsync("soundOn", value);
    }

    private async Task OnImgTurnChanged(bool value)
    {
        ImgOn = value;
        helpers_.ImgOn = value;

        await localStorage.SetItemAsync("imgOn", value);
    }

    private async Task OnLoad()
    {
        await helpers_.LoadData();
        sequenceCities = helpers_.sequenceCities;

        StateHasChanged();
    }

    private async Task OnDateChanged(DateTime? date)
    {
        Array.ForEach(sequenceCities, x => x.Date = date?.AddHours((double)x.Date?.Hour).AddMinutes((double)x.Date?.Minute));
    }

    private async Task OnTimeChanged(TimeSpan? time)
    {
        double h = (double)time?.Hours;

        Array.ForEach(sequenceCities, x => x.Date = x.Date?.AddHours(-(double)x.Date?.Hour).AddHours(h));
    }
}
