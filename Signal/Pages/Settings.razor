@page "/settings"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Helpers helpers_
@using Signal.Shared
@using System.Linq
@using Microsoft.Extensions.Configuration
@inject IConfiguration configuration
@inject IDialogService DialogService

<MudGrid>
    <MudItem xs="12" sm="2" md="2">
        <MudNumericField T="int" Value="TimePreSound" ValueChanged="OnTimePreSoundChanged" Label="Предварительный сигнал (сек.)" Variant="Variant.Text" Min="0" Max="100" />
    </MudItem>
    <MudItem xs="12" sm="5" md="5">
        <MudTextField T="string" Value="@TextCommon" ValueChanged="OnTextCommonChanged" Placeholder="Общий текст" title="Текст, идущий перед каждой Заповледью" />
    </MudItem>
    <MudItem xs="12" sm="5" md="5">
        <MudTextField T="string" Value="@ImgPath" ValueChanged="OnImgPathChanged" Placeholder="Путь к изображению" />
    </MudItem>
</MudGrid>

<MudSwitch T="bool" Checked="@SoundOn" CheckedChanged="OnSoundTurnChanged" Label="Звуковой сигнал" title="Для срабатывания звукового сигнала, при достижении обратным отсчётом нулевого значения" Color="Color.Primary" />
<MudSwitch T="bool" Checked="@ImgOn" CheckedChanged="OnImgTurnChanged" Label="Изображение" title="Отображение на главной странице изображения (с картой)" Color="Color.Primary" />
<MudSwitch T="bool" Checked="@TextCommonOn" CheckedChanged="OnTextCommonChanged" Label="Общий текст" title="Отображение в таймере общего текста (идущего перед каждой Заповледью) для каждой точки" Color="Color.Primary" />
<MudSwitch T="bool" Checked="@TextPointOn" CheckedChanged="OnTextPointChanged" Label="Основной текст" title="Отображение в таймере основного текста каждой точки" Color="Color.Primary" />
<MudSlider T="double" Value="@Volume" ValueChanged="OnValueChanged" Variant="Variant.Filled" TickMarks="true" ValueLabel="true" Size="Size.Medium">Громкость: @Volume.ToString()</MudSlider>

<MudGrid>
    <MudItem xs="12" sm="3" md="2">
        <MudDatePicker Label="Дата Посыла" DateChanged="OnDateChanged" />
    </MudItem>
    <MudItem xs="12" sm="3" md="2">
        <MudTimePicker Label="Час Посыла" TimeChanged="OnTimeChanged" OpenTo="OpenTo.Hours" TimeEditMode="TimeEditMode.OnlyHours" />
    </MudItem>
    <MudItem xs="12" sm="6" md="8">
        <MudTextField T="string" Value="@DataPath" ValueChanged="OnDataPathChanged" OnAdornmentClick="OnLoad" Placeholder="Путь к данным" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Refresh" />
    </MudItem>
</MudGrid>

@if (sequenceCities == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="sequenceCities" Hover="true" RowsPerPage=25 SortLabel="Сортировать по" Elevation="0">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<SequenceCities, object>(x=>x.Date)">Время</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SequenceCities, object>(x=>x.Point)">Место</MudTableSortLabel></MudTh>
            <MudTh>Текст</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Время">@context.Date</MudTd>
            <MudTd DataLabel="Место">@context.Point</MudTd>
            <MudTd DataLabel="Текст">@context.Text</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}


<MudText>Приложение: @AppVer</MudText>


@code {
    private Version AppVer;
    //private SequenceCities[] sequenceCities;
    private IEnumerable<SequenceCities> sequenceCities;
    private string DataPath { get; set; }
    private bool SoundOn { get; set; }
    private bool ImgOn { get; set; }
    private bool TextCommonOn { get; set; }
    private bool TextPointOn { get; set; }
    private string ImgPath { get; set; }
    private string TextCommon { get; set; }
    private int TimePreSound { get; set; }
    private double Volume { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AppVer = System.Reflection.Assembly.GetEntryAssembly().GetName().Version;

        if (!helpers_.IsInitialized) await helpers_.Initialize(Http, localStorage, configuration);
        sequenceCities = helpers_.sequenceCities;
        DataPath = helpers_.DataPath;
        SoundOn = helpers_.SoundOn;
        ImgOn = helpers_.ImgOn;
        TextCommonOn = helpers_.TextCommonOn;
        TextPointOn = helpers_.TextPointOn;
        ImgPath = helpers_.ImgPath;
        TextCommon = helpers_.TextCommonStore;
        TimePreSound = helpers_.TimePreSound;
        Volume = helpers_.Volume;

        StateHasChanged();
    }

    private async Task OnDataPathChanged(string value)
    {
        DataPath = value;
        helpers_.DataPath = value;

        await localStorage.SetItemAsync("dataPath", value);
    }

    private async Task OnImgPathChanged(string value)
    {
        ImgPath = value;
        helpers_.ImgPath = value;
    }

    private async Task OnTextCommonChanged(string value)
    {
        TextCommon = value;
        helpers_.TextCommonStore = value;
        await localStorage.SetItemAsync("textCommon", value);
    }

    private async Task OnTimePreSoundChanged(int value)
    {
        TimePreSound = value;
        helpers_.TimePreSound = value;
        await localStorage.SetItemAsync("timePreSound", value);
    }

    private async Task OnSoundTurnChanged(bool value)
    {
        if (value)
        {
            await DialogService.ShowMessageBox(
                "Внимание", 
                "Для правильной работы звукового сигнала необходимо, чтоб главная страница этого сайта всегда была открыта, а на смартфоне экран не погашен! На смартфонах возможно запаздывание срабатывания сигнала на несколько секунд.", 
                yesText:"Понятно");
        }

        SoundOn = value;
        helpers_.SoundOn = value;

        await localStorage.SetItemAsync("soundOn", value);
    }

    private async Task OnImgTurnChanged(bool value)
    {
        ImgOn = value;
        helpers_.ImgOn = value;

        await localStorage.SetItemAsync("imgOn", value);
    }

    private async Task OnTextCommonChanged(bool value)
    {
        TextCommonOn = value;
        helpers_.TextCommonOn = value;

        await localStorage.SetItemAsync("textCommonOn", value);
    }

    private async Task OnTextPointChanged(bool value)
    {
        TextPointOn = value;
        helpers_.TextPointOn = value;

        await localStorage.SetItemAsync("textPointOn", value);
    }

    private async Task OnLoad()
    {
        await helpers_.LoadData();
        sequenceCities = helpers_.sequenceCities;

        StateHasChanged();
    }

    private async Task OnDateChanged(DateTime? date)
    {
        //Array.ForEach(sequenceCities, x => x.Date = date?.AddHours((double)x.Date?.Hour).AddMinutes((double)x.Date?.Minute));
        foreach (var point in sequenceCities)
            point.Date = date?.AddHours((double)point.Date?.Hour).AddMinutes((double)point.Date?.Minute);
    }

    private async Task OnTimeChanged(TimeSpan? time)
    {
        double h = (double)time?.Hours;
        var diff = (double)sequenceCities.ElementAt(0).Date?.Hour - h;

        /*Array.ForEach(sequenceCities, x =>
            {
                var diff2 = diff - ((double)x.Date?.Hour - h);
                x.Date = x.Date?.AddHours(-(double)x.Date?.Hour).AddHours(h).AddHours(-diff2);
            }
        );*/
        foreach (var x in sequenceCities)
        {
            var diff2 = diff - ((double)x.Date?.Hour - h);
            x.Date = x.Date?.AddHours(-(double)x.Date?.Hour).AddHours(h).AddHours(-diff2);
        }
    }

    private async Task OnValueChanged(double value)
    {
        Volume = value;
        helpers_.Volume = value;

        await localStorage.SetItemAsync("volume", value);
    }
}
