@inherits LayoutComponentBase

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http
@inject Helpers helpers_

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Dense=true Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Сигнал</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    bool _drawerOpen = true;

    [Inject] private IDialogService DialogService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //if (!helpers_.IsInitialized) await helpers_.Initialize(Http, localStorage);

        var _openPopup = !(await localStorage.GetItemAsync<bool>("isReadFirst"));

        if (_openPopup)
        {
            bool? result = await DialogService.ShowMessageBox(
                "Внимание", 
                "Для правильной работы звукового сигнала необходимо, чтоб главная страница этого сайта всегда была открыта, а на смартфоне экран не погашен!", 
                yesText:"Понятно!", cancelText:"Отмена");

            if (result != null) await localStorage.SetItemAsync("isReadFirst", true);
            
            StateHasChanged();
        }

    }

    protected async Task OnRead()
    {
        await localStorage.SetItemAsync("isReadFirst", true);
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}